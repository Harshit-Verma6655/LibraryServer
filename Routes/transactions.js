const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');
const Book = require('../models/Book');
const User = require('../models/User');

// Issue a book
router.post('/issue', async (req, res) => {
  const { bookId, userId, issueDate } = req.body;
  
  try {
    const book = await Book.findById(bookId);
    const user = await User.findById(userId);
    
    if (!book || !user) return res.status(404).json({ message: 'Book or User not found' });

    const transaction = new Transaction({ bookId, userId, issueDate });
    await transaction.save();
    res.status(201).json(transaction);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Return a book
router.post('/return', async (req, res) => {
  const { bookId, userId, returnDate } = req.body;

  try {
    const transaction = await Transaction.findOne({ bookId, userId, returnDate: null });
    
    if (!transaction) return res.status(404).json({ message: 'Transaction not found' });
    
    transaction.returnDate = new Date(returnDate);
    
    const rentDays = Math.ceil((transaction.returnDate - transaction.issueDate) / (1000 * 60 * 60 * 24));
    const book = await Book.findById(bookId);
    
    transaction.rentCharged = rentDays * book.rentPerDay;
    await transaction.save();
    
    res.json(transaction);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get list of people who have issued a book
router.get('/book/:bookId/issued', async (req, res) => {
  try {
    const transactions = await Transaction.find({ bookId: req.params.bookId }).populate('userId', 'name');
    const currentlyIssued = transactions.find(txn => !txn.returnDate);
    res.json({ totalIssued: transactions.length, currentlyIssued });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get total rent generated by a book
router.get('/book/:bookId/totalRent', async (req, res) => {
  try {
    const transactions = await Transaction.find({ bookId: req.params.bookId });
    const totalRent = transactions.reduce((sum, txn) => sum + (txn.rentCharged || 0), 0);
    res.json({ totalRent });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get list of books issued to a person
router.get('/user/:userId/issued', async (req, res) => {
  try {
    const transactions = await Transaction.find({ userId: req.params.userId }).populate('bookId', 'name');
    res.json(transactions);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get list of books issued in a date range
router.get('/issued', async (req, res) => {
  const { startDate, endDate } = req.query;
  
  try {
    const transactions = await Transaction.find({
      issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
    }).populate('bookId userId', 'name');
    res.json(transactions);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
